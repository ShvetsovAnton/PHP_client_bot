import os

import requests
from dotenv import load_dotenv

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram import (Bot,
                     Dispatcher,
                     executor,
                     types)

from utils import OrderStateGroup
from quires_tools import (verification_access,
                          make_new_order,
                          send_secretkey)

from markups_client_bot import (main_menu,
                                payment_menu,
                                secret_menu,
                                contactus_menu,
                                executor_menu)


load_dotenv()
telegram_client_token = os.getenv('TELEGRAM_CLIENT_TOKEN')
telegram_executor_token = os.getenv('TELEGRAM_EXECUTOR_TOKEN')
storage = MemoryStorage()
bot2 = Bot(token=telegram_executor_token)
bot = Bot(token=telegram_client_token)
dp = Dispatcher(bot, bot2, storage=storage)


@dp.message_handler(commands=['start'])
async def verification_user(message: types.Message) -> None:
    try:
        tg_username, dp_user_id, tg_user_id = verification_access(message)
        order_description['tg_username'] = tg_username
        order_description['dp_user_id'] = dp_user_id
        order_description['tg_user_id'] = tg_user_id
        await message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!\n\n'
            '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç '
            '–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.\n\n'
            '–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ:\n'
            '"üìë–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"',
            reply_markup=main_menu
        )
    except (TypeError, requests.HTTPError):
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}\n\n'
            'üöß –î–∞–Ω–Ω—ã–π –±–æ—Ç ü§ñ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–∞–∫ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å,'
            ' –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö '
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üöß\n\n '
            'üëá<b>–ü–æ–ª—É—á–∏—Ç—å</b> –¥–æ—Å—Ç—É–ø –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá',
            parse_mode='HTML',
            reply_markup=payment_menu
        )


@dp.callback_query_handler(text='new_order')
async def wait_order(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        '‚ùì–ö–∞–∫ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∑–∞–∫–∞–∑‚ùì\n\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:\n'
        '<i>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 450 SKU '
        '–Ω–∞ —Å–∞–π—Ç –∏–∑ Execel —Ç–∞–±–ª–∏—Ü—ã</i>\n\n'
        '<b>üí¨–°–ª–µ–¥—É—é—â–µ–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.</b>\n'
        '',
        parse_mode='HTML'
    )
    await OrderStateGroup.new_order.set()


@dp.message_handler(content_types=['text'], state=OrderStateGroup.new_order)
async def make_order(message: types.Message, state: FSMContext):
    async with state.proxy() as new_order:
        new_order["text"] = message.text
        order_id = make_new_order(new_order, order_description)
        order_description['order_id'] = order_id
    await state.finish()
    await message.answer(
        f'{message.from_user.first_name}, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–æ–≥ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.'
        '\n–ï–º—É –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–øüîê\n\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–π—Çüëá\n\n',
        parse_mode='HTML',
        reply_markup=secret_menu
    )


@dp.callback_query_handler(text='secret_key')
async def wait_order(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        '‚ö†Ô∏è–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞‚ö†Ô∏è\n\n'
        '<b>üí¨–°–ª–µ–¥—É—é—â–µ–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.</b>\n',
        parse_mode='HTML'
    )
    await OrderStateGroup.secretkey.set()


@dp.message_handler(content_types=['text'], state=OrderStateGroup.secretkey)
async def take_order(message: types.Message, state: FSMContext):
    async with state.proxy() as order:
        order["secret"] = message.text
        send_secretkey(order, order_description)
        await state.finish()
    await message.answer(
        "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!‚úÖ\n\n"
        "<i>\n–ï—Å–ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç "
        "–≤–æ–ø—Ä–æ—Å—ã –æ–Ω –í–∞–º –Ω–∞–ø–∏—à–µ—Ç </i>",
        parse_mode="HTML",
        reply_markup=contactus_menu
    )


@dp.callback_query_handler(text='comment_to')
async def comment_to_client(message: types.Message):
    await bot.send_message(message.from_user.id,
                           "üí¨ –í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                           "–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
    await OrderStateGroup.comment_to.set()


@dp.message_handler(content_types=['text'], state=OrderStateGroup.comment_to)
async def worker_comment(message: types.Message, state: FSMContext):
    async with state.proxy():
        client_tg_id = "406682076"
        await bot2.send_message(
            client_tg_id,
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–∑—è—Ç—å—Å—è –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, '
            '–Ω–æ —É –Ω–µ–≥–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
            '‚ùì <b>–í–æ–ø—Ä–æ—Å –∑–≤—É—á–∏—Ç —Ç–∞–∫:</b>\n'
            f'<i>"{message.text}"</i>\n\n'
            '–û—Ç–≤–µ—Ç–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∏–∂–µ',
                               parse_mode='HTML', reply_markup=executor_menu)
        await bot.send_message(
            message.from_user.id,
            '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é...')
    await state.finish()


@dp.message_handler(content_types="text")
async def contact_us(message: types.Message):
    await message.reply(
        "–Ø –º–æ–ª–æ–¥–æ–π –±–æ—Ç, –∏ –µ—â—ë —Ç–æ–ª—å–∫–æ —É—á—É—Å—å.üë®‚Äçüéì\n"
        "–ò –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–æ–µ–º—É —á–µ–ª–æ–≤–µ–∫—É - –æ–Ω –ø–æ–º–æ–∂–µ—Ç.\n",
        reply_markup=contactus_menu
    )


@dp.callback_query_handler()
async def answer_callback(callback: types.CallbackQuery):
    if callback.data == "answers":
        await callback.message.answer(
            text="–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–æ—Ä–æ—Å –∏–Ω—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ:\n"
                 "üì¨–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")


if __name__ == '__main__':
    order_description = {}
    executor.start_polling(dp, skip_updates=True)
